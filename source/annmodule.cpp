/*
MIT License

Copyright (c) 2018 Advanced Micro Devices, Inc. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/* This file is generated by nnir2openvx.py on 2019-05-10T17:58:18.928548-07:00 */

#include "annmodule.h"
#include <VX/vx_khr_nn.h>
#include <vx_amd_nn.h>
#include <vx_ext_amd.h>
#include <stdio.h>

#define ERROR_CHECK_OBJECT(obj) { vx_status status = vxGetStatus((vx_reference)(obj)); if(status != VX_SUCCESS) { vxAddLogEntry((vx_reference)context, status     , "ERROR: failed with status = (%d) at " __FILE__ "#%d\n", status, __LINE__); return status; } }
#define ERROR_CHECK_STATUS(call) { vx_status status = (call); if(status != VX_SUCCESS) { vxAddLogEntry((vx_reference)context, status, "ERROR: failed with status = (%d) at " __FILE__ "#%d\n", status, __LINE__); return status; } }

static vx_status initializeTensor(vx_context context, vx_tensor tensor, FILE * fp, const char * binaryFilename)
{
    vx_enum data_type = VX_TYPE_FLOAT32;
    vx_size num_of_dims = 4, dims[4] = { 1, 1, 1, 1 }, stride[4];
    ERROR_CHECK_STATUS(vxQueryTensor(tensor, VX_TENSOR_DATA_TYPE, &data_type, sizeof(vx_enum)));
    ERROR_CHECK_STATUS(vxQueryTensor(tensor, VX_TENSOR_NUMBER_OF_DIMS, &num_of_dims, sizeof(vx_size)));
    ERROR_CHECK_STATUS(vxQueryTensor(tensor, VX_TENSOR_DIMS, &dims, num_of_dims * sizeof(vx_size)));
    vx_size itemsize = sizeof(float);
    if(data_type == VX_TYPE_UINT8 || data_type == VX_TYPE_INT8) {
        itemsize = sizeof(vx_uint8);
    }
    else if(data_type == VX_TYPE_UINT16 || data_type == VX_TYPE_INT16 || data_type == VX_TYPE_FLOAT16) {
        itemsize = sizeof(vx_uint16);
    }
    else if(data_type == VX_TYPE_INT64) {
        itemsize = sizeof(vx_int64);
    }
    vx_size count = dims[0] * dims[1] * dims[2] * dims[3];

    vx_uint32 h[2] = { 0 };
    fread(h, 1, sizeof(h), fp);
    if(h[0] != 0xf00dd1e1 || (vx_size)h[1] != (count*itemsize)) {
      vxAddLogEntry((vx_reference)tensor, VX_FAILURE, "ERROR: invalid data (magic,size)=(0x%x,%d) in %s at byte position %d -- expected size is %ld\n", h[0], h[1], binaryFilename, ftell(fp)-sizeof(h), count*itemsize);
      return VX_FAILURE;
    }

    vx_map_id map_id;
    void * ptr;
    ERROR_CHECK_STATUS(vxMapTensorPatch(tensor, num_of_dims, nullptr, nullptr, &map_id, stride, (void **)&ptr, VX_WRITE_ONLY, VX_MEMORY_TYPE_HOST, 0));
    vx_size n = fread(ptr, itemsize, count, fp);
    if(n != count) {
        vxAddLogEntry((vx_reference)tensor, VX_FAILURE, "ERROR: expected char[%ld], but got char[%ld] in %s\n", count*itemsize, n*itemsize, binaryFilename);
        return VX_FAILURE;
    }
    ERROR_CHECK_STATUS(vxUnmapTensorPatch(tensor, map_id));

    return VX_SUCCESS;
}

VX_API_ENTRY vx_status VX_API_CALL annAddToGraph(vx_graph graph, vx_tensor data, vx_tensor loss, const char * binaryFilename)
{
    vx_context context = vxGetContext((vx_reference)graph);
    ERROR_CHECK_OBJECT(context);
    ERROR_CHECK_STATUS(vxLoadKernels(context, "vx_nn"));

    // create variables
    vx_size dims_conv1_7x7_s2_w[4] = { 7, 7, 3, 64 };
    vx_tensor conv1_7x7_s2_w = vxCreateTensor(context, 4, dims_conv1_7x7_s2_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_7x7_s2_w);
    vx_size dims_conv1_7x7_s2_b[2] = { 64, 1 };
    vx_tensor conv1_7x7_s2_b = vxCreateTensor(context, 2, dims_conv1_7x7_s2_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_7x7_s2_b);
    vx_size dims_conv2_3x3_reduce_w[4] = { 1, 1, 64, 64 };
    vx_tensor conv2_3x3_reduce_w = vxCreateTensor(context, 4, dims_conv2_3x3_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_3x3_reduce_w);
    vx_size dims_conv2_3x3_reduce_b[2] = { 64, 1 };
    vx_tensor conv2_3x3_reduce_b = vxCreateTensor(context, 2, dims_conv2_3x3_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_3x3_reduce_b);
    vx_size dims_conv2_3x3_w[4] = { 3, 3, 64, 192 };
    vx_tensor conv2_3x3_w = vxCreateTensor(context, 4, dims_conv2_3x3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_3x3_w);
    vx_size dims_conv2_3x3_b[2] = { 192, 1 };
    vx_tensor conv2_3x3_b = vxCreateTensor(context, 2, dims_conv2_3x3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_3x3_b);
    vx_size dims_inception_3a_1x1_w[4] = { 1, 1, 192, 64 };
    vx_tensor inception_3a_1x1_w = vxCreateTensor(context, 4, dims_inception_3a_1x1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_1x1_w);
    vx_size dims_inception_3a_1x1_b[2] = { 64, 1 };
    vx_tensor inception_3a_1x1_b = vxCreateTensor(context, 2, dims_inception_3a_1x1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_1x1_b);
    vx_size dims_inception_3a_3x3_reduce_w[4] = { 1, 1, 192, 96 };
    vx_tensor inception_3a_3x3_reduce_w = vxCreateTensor(context, 4, dims_inception_3a_3x3_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_3x3_reduce_w);
    vx_size dims_inception_3a_3x3_reduce_b[2] = { 96, 1 };
    vx_tensor inception_3a_3x3_reduce_b = vxCreateTensor(context, 2, dims_inception_3a_3x3_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_3x3_reduce_b);
    vx_size dims_inception_3a_3x3_w[4] = { 3, 3, 96, 128 };
    vx_tensor inception_3a_3x3_w = vxCreateTensor(context, 4, dims_inception_3a_3x3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_3x3_w);
    vx_size dims_inception_3a_3x3_b[2] = { 128, 1 };
    vx_tensor inception_3a_3x3_b = vxCreateTensor(context, 2, dims_inception_3a_3x3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_3x3_b);
    vx_size dims_inception_3a_5x5_reduce_w[4] = { 1, 1, 192, 16 };
    vx_tensor inception_3a_5x5_reduce_w = vxCreateTensor(context, 4, dims_inception_3a_5x5_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_5x5_reduce_w);
    vx_size dims_inception_3a_5x5_reduce_b[2] = { 16, 1 };
    vx_tensor inception_3a_5x5_reduce_b = vxCreateTensor(context, 2, dims_inception_3a_5x5_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_5x5_reduce_b);
    vx_size dims_inception_3a_5x5_w[4] = { 5, 5, 16, 32 };
    vx_tensor inception_3a_5x5_w = vxCreateTensor(context, 4, dims_inception_3a_5x5_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_5x5_w);
    vx_size dims_inception_3a_5x5_b[2] = { 32, 1 };
    vx_tensor inception_3a_5x5_b = vxCreateTensor(context, 2, dims_inception_3a_5x5_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_5x5_b);
    vx_size dims_inception_3a_pool_proj_w[4] = { 1, 1, 192, 32 };
    vx_tensor inception_3a_pool_proj_w = vxCreateTensor(context, 4, dims_inception_3a_pool_proj_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_pool_proj_w);
    vx_size dims_inception_3a_pool_proj_b[2] = { 32, 1 };
    vx_tensor inception_3a_pool_proj_b = vxCreateTensor(context, 2, dims_inception_3a_pool_proj_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_pool_proj_b);
    vx_size dims_inception_3b_1x1_w[4] = { 1, 1, 256, 128 };
    vx_tensor inception_3b_1x1_w = vxCreateTensor(context, 4, dims_inception_3b_1x1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_1x1_w);
    vx_size dims_inception_3b_1x1_b[2] = { 128, 1 };
    vx_tensor inception_3b_1x1_b = vxCreateTensor(context, 2, dims_inception_3b_1x1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_1x1_b);
    vx_size dims_inception_3b_3x3_reduce_w[4] = { 1, 1, 256, 128 };
    vx_tensor inception_3b_3x3_reduce_w = vxCreateTensor(context, 4, dims_inception_3b_3x3_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_3x3_reduce_w);
    vx_size dims_inception_3b_3x3_reduce_b[2] = { 128, 1 };
    vx_tensor inception_3b_3x3_reduce_b = vxCreateTensor(context, 2, dims_inception_3b_3x3_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_3x3_reduce_b);
    vx_size dims_inception_3b_3x3_w[4] = { 3, 3, 128, 192 };
    vx_tensor inception_3b_3x3_w = vxCreateTensor(context, 4, dims_inception_3b_3x3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_3x3_w);
    vx_size dims_inception_3b_3x3_b[2] = { 192, 1 };
    vx_tensor inception_3b_3x3_b = vxCreateTensor(context, 2, dims_inception_3b_3x3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_3x3_b);
    vx_size dims_inception_3b_5x5_reduce_w[4] = { 1, 1, 256, 32 };
    vx_tensor inception_3b_5x5_reduce_w = vxCreateTensor(context, 4, dims_inception_3b_5x5_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_5x5_reduce_w);
    vx_size dims_inception_3b_5x5_reduce_b[2] = { 32, 1 };
    vx_tensor inception_3b_5x5_reduce_b = vxCreateTensor(context, 2, dims_inception_3b_5x5_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_5x5_reduce_b);
    vx_size dims_inception_3b_5x5_w[4] = { 5, 5, 32, 96 };
    vx_tensor inception_3b_5x5_w = vxCreateTensor(context, 4, dims_inception_3b_5x5_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_5x5_w);
    vx_size dims_inception_3b_5x5_b[2] = { 96, 1 };
    vx_tensor inception_3b_5x5_b = vxCreateTensor(context, 2, dims_inception_3b_5x5_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_5x5_b);
    vx_size dims_inception_3b_pool_proj_w[4] = { 1, 1, 256, 64 };
    vx_tensor inception_3b_pool_proj_w = vxCreateTensor(context, 4, dims_inception_3b_pool_proj_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_pool_proj_w);
    vx_size dims_inception_3b_pool_proj_b[2] = { 64, 1 };
    vx_tensor inception_3b_pool_proj_b = vxCreateTensor(context, 2, dims_inception_3b_pool_proj_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_pool_proj_b);
    vx_size dims_inception_4a_1x1_w[4] = { 1, 1, 480, 192 };
    vx_tensor inception_4a_1x1_w = vxCreateTensor(context, 4, dims_inception_4a_1x1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_1x1_w);
    vx_size dims_inception_4a_1x1_b[2] = { 192, 1 };
    vx_tensor inception_4a_1x1_b = vxCreateTensor(context, 2, dims_inception_4a_1x1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_1x1_b);
    vx_size dims_inception_4a_3x3_reduce_w[4] = { 1, 1, 480, 96 };
    vx_tensor inception_4a_3x3_reduce_w = vxCreateTensor(context, 4, dims_inception_4a_3x3_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_3x3_reduce_w);
    vx_size dims_inception_4a_3x3_reduce_b[2] = { 96, 1 };
    vx_tensor inception_4a_3x3_reduce_b = vxCreateTensor(context, 2, dims_inception_4a_3x3_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_3x3_reduce_b);
    vx_size dims_inception_4a_3x3_w[4] = { 3, 3, 96, 208 };
    vx_tensor inception_4a_3x3_w = vxCreateTensor(context, 4, dims_inception_4a_3x3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_3x3_w);
    vx_size dims_inception_4a_3x3_b[2] = { 208, 1 };
    vx_tensor inception_4a_3x3_b = vxCreateTensor(context, 2, dims_inception_4a_3x3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_3x3_b);
    vx_size dims_inception_4a_5x5_reduce_w[4] = { 1, 1, 480, 16 };
    vx_tensor inception_4a_5x5_reduce_w = vxCreateTensor(context, 4, dims_inception_4a_5x5_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_5x5_reduce_w);
    vx_size dims_inception_4a_5x5_reduce_b[2] = { 16, 1 };
    vx_tensor inception_4a_5x5_reduce_b = vxCreateTensor(context, 2, dims_inception_4a_5x5_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_5x5_reduce_b);
    vx_size dims_inception_4a_5x5_w[4] = { 5, 5, 16, 48 };
    vx_tensor inception_4a_5x5_w = vxCreateTensor(context, 4, dims_inception_4a_5x5_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_5x5_w);
    vx_size dims_inception_4a_5x5_b[2] = { 48, 1 };
    vx_tensor inception_4a_5x5_b = vxCreateTensor(context, 2, dims_inception_4a_5x5_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_5x5_b);
    vx_size dims_inception_4a_pool_proj_w[4] = { 1, 1, 480, 64 };
    vx_tensor inception_4a_pool_proj_w = vxCreateTensor(context, 4, dims_inception_4a_pool_proj_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_pool_proj_w);
    vx_size dims_inception_4a_pool_proj_b[2] = { 64, 1 };
    vx_tensor inception_4a_pool_proj_b = vxCreateTensor(context, 2, dims_inception_4a_pool_proj_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_pool_proj_b);
    vx_size dims_inception_4b_1x1_w[4] = { 1, 1, 512, 160 };
    vx_tensor inception_4b_1x1_w = vxCreateTensor(context, 4, dims_inception_4b_1x1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_1x1_w);
    vx_size dims_inception_4b_1x1_b[2] = { 160, 1 };
    vx_tensor inception_4b_1x1_b = vxCreateTensor(context, 2, dims_inception_4b_1x1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_1x1_b);
    vx_size dims_inception_4b_3x3_reduce_w[4] = { 1, 1, 512, 112 };
    vx_tensor inception_4b_3x3_reduce_w = vxCreateTensor(context, 4, dims_inception_4b_3x3_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_3x3_reduce_w);
    vx_size dims_inception_4b_3x3_reduce_b[2] = { 112, 1 };
    vx_tensor inception_4b_3x3_reduce_b = vxCreateTensor(context, 2, dims_inception_4b_3x3_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_3x3_reduce_b);
    vx_size dims_inception_4b_3x3_w[4] = { 3, 3, 112, 224 };
    vx_tensor inception_4b_3x3_w = vxCreateTensor(context, 4, dims_inception_4b_3x3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_3x3_w);
    vx_size dims_inception_4b_3x3_b[2] = { 224, 1 };
    vx_tensor inception_4b_3x3_b = vxCreateTensor(context, 2, dims_inception_4b_3x3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_3x3_b);
    vx_size dims_inception_4b_5x5_reduce_w[4] = { 1, 1, 512, 24 };
    vx_tensor inception_4b_5x5_reduce_w = vxCreateTensor(context, 4, dims_inception_4b_5x5_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_5x5_reduce_w);
    vx_size dims_inception_4b_5x5_reduce_b[2] = { 24, 1 };
    vx_tensor inception_4b_5x5_reduce_b = vxCreateTensor(context, 2, dims_inception_4b_5x5_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_5x5_reduce_b);
    vx_size dims_inception_4b_5x5_w[4] = { 5, 5, 24, 64 };
    vx_tensor inception_4b_5x5_w = vxCreateTensor(context, 4, dims_inception_4b_5x5_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_5x5_w);
    vx_size dims_inception_4b_5x5_b[2] = { 64, 1 };
    vx_tensor inception_4b_5x5_b = vxCreateTensor(context, 2, dims_inception_4b_5x5_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_5x5_b);
    vx_size dims_inception_4b_pool_proj_w[4] = { 1, 1, 512, 64 };
    vx_tensor inception_4b_pool_proj_w = vxCreateTensor(context, 4, dims_inception_4b_pool_proj_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_pool_proj_w);
    vx_size dims_inception_4b_pool_proj_b[2] = { 64, 1 };
    vx_tensor inception_4b_pool_proj_b = vxCreateTensor(context, 2, dims_inception_4b_pool_proj_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_pool_proj_b);
    vx_size dims_inception_4c_1x1_w[4] = { 1, 1, 512, 128 };
    vx_tensor inception_4c_1x1_w = vxCreateTensor(context, 4, dims_inception_4c_1x1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_1x1_w);
    vx_size dims_inception_4c_1x1_b[2] = { 128, 1 };
    vx_tensor inception_4c_1x1_b = vxCreateTensor(context, 2, dims_inception_4c_1x1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_1x1_b);
    vx_size dims_inception_4c_3x3_reduce_w[4] = { 1, 1, 512, 128 };
    vx_tensor inception_4c_3x3_reduce_w = vxCreateTensor(context, 4, dims_inception_4c_3x3_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_3x3_reduce_w);
    vx_size dims_inception_4c_3x3_reduce_b[2] = { 128, 1 };
    vx_tensor inception_4c_3x3_reduce_b = vxCreateTensor(context, 2, dims_inception_4c_3x3_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_3x3_reduce_b);
    vx_size dims_inception_4c_3x3_w[4] = { 3, 3, 128, 256 };
    vx_tensor inception_4c_3x3_w = vxCreateTensor(context, 4, dims_inception_4c_3x3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_3x3_w);
    vx_size dims_inception_4c_3x3_b[2] = { 256, 1 };
    vx_tensor inception_4c_3x3_b = vxCreateTensor(context, 2, dims_inception_4c_3x3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_3x3_b);
    vx_size dims_inception_4c_5x5_reduce_w[4] = { 1, 1, 512, 24 };
    vx_tensor inception_4c_5x5_reduce_w = vxCreateTensor(context, 4, dims_inception_4c_5x5_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_5x5_reduce_w);
    vx_size dims_inception_4c_5x5_reduce_b[2] = { 24, 1 };
    vx_tensor inception_4c_5x5_reduce_b = vxCreateTensor(context, 2, dims_inception_4c_5x5_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_5x5_reduce_b);
    vx_size dims_inception_4c_5x5_w[4] = { 5, 5, 24, 64 };
    vx_tensor inception_4c_5x5_w = vxCreateTensor(context, 4, dims_inception_4c_5x5_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_5x5_w);
    vx_size dims_inception_4c_5x5_b[2] = { 64, 1 };
    vx_tensor inception_4c_5x5_b = vxCreateTensor(context, 2, dims_inception_4c_5x5_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_5x5_b);
    vx_size dims_inception_4c_pool_proj_w[4] = { 1, 1, 512, 64 };
    vx_tensor inception_4c_pool_proj_w = vxCreateTensor(context, 4, dims_inception_4c_pool_proj_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_pool_proj_w);
    vx_size dims_inception_4c_pool_proj_b[2] = { 64, 1 };
    vx_tensor inception_4c_pool_proj_b = vxCreateTensor(context, 2, dims_inception_4c_pool_proj_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_pool_proj_b);
    vx_size dims_inception_4d_1x1_w[4] = { 1, 1, 512, 112 };
    vx_tensor inception_4d_1x1_w = vxCreateTensor(context, 4, dims_inception_4d_1x1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_1x1_w);
    vx_size dims_inception_4d_1x1_b[2] = { 112, 1 };
    vx_tensor inception_4d_1x1_b = vxCreateTensor(context, 2, dims_inception_4d_1x1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_1x1_b);
    vx_size dims_inception_4d_3x3_reduce_w[4] = { 1, 1, 512, 144 };
    vx_tensor inception_4d_3x3_reduce_w = vxCreateTensor(context, 4, dims_inception_4d_3x3_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_3x3_reduce_w);
    vx_size dims_inception_4d_3x3_reduce_b[2] = { 144, 1 };
    vx_tensor inception_4d_3x3_reduce_b = vxCreateTensor(context, 2, dims_inception_4d_3x3_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_3x3_reduce_b);
    vx_size dims_inception_4d_3x3_w[4] = { 3, 3, 144, 288 };
    vx_tensor inception_4d_3x3_w = vxCreateTensor(context, 4, dims_inception_4d_3x3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_3x3_w);
    vx_size dims_inception_4d_3x3_b[2] = { 288, 1 };
    vx_tensor inception_4d_3x3_b = vxCreateTensor(context, 2, dims_inception_4d_3x3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_3x3_b);
    vx_size dims_inception_4d_5x5_reduce_w[4] = { 1, 1, 512, 32 };
    vx_tensor inception_4d_5x5_reduce_w = vxCreateTensor(context, 4, dims_inception_4d_5x5_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_5x5_reduce_w);
    vx_size dims_inception_4d_5x5_reduce_b[2] = { 32, 1 };
    vx_tensor inception_4d_5x5_reduce_b = vxCreateTensor(context, 2, dims_inception_4d_5x5_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_5x5_reduce_b);
    vx_size dims_inception_4d_5x5_w[4] = { 5, 5, 32, 64 };
    vx_tensor inception_4d_5x5_w = vxCreateTensor(context, 4, dims_inception_4d_5x5_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_5x5_w);
    vx_size dims_inception_4d_5x5_b[2] = { 64, 1 };
    vx_tensor inception_4d_5x5_b = vxCreateTensor(context, 2, dims_inception_4d_5x5_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_5x5_b);
    vx_size dims_inception_4d_pool_proj_w[4] = { 1, 1, 512, 64 };
    vx_tensor inception_4d_pool_proj_w = vxCreateTensor(context, 4, dims_inception_4d_pool_proj_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_pool_proj_w);
    vx_size dims_inception_4d_pool_proj_b[2] = { 64, 1 };
    vx_tensor inception_4d_pool_proj_b = vxCreateTensor(context, 2, dims_inception_4d_pool_proj_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_pool_proj_b);
    vx_size dims_inception_4e_1x1_w[4] = { 1, 1, 528, 256 };
    vx_tensor inception_4e_1x1_w = vxCreateTensor(context, 4, dims_inception_4e_1x1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_1x1_w);
    vx_size dims_inception_4e_1x1_b[2] = { 256, 1 };
    vx_tensor inception_4e_1x1_b = vxCreateTensor(context, 2, dims_inception_4e_1x1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_1x1_b);
    vx_size dims_inception_4e_3x3_reduce_w[4] = { 1, 1, 528, 160 };
    vx_tensor inception_4e_3x3_reduce_w = vxCreateTensor(context, 4, dims_inception_4e_3x3_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_3x3_reduce_w);
    vx_size dims_inception_4e_3x3_reduce_b[2] = { 160, 1 };
    vx_tensor inception_4e_3x3_reduce_b = vxCreateTensor(context, 2, dims_inception_4e_3x3_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_3x3_reduce_b);
    vx_size dims_inception_4e_3x3_w[4] = { 3, 3, 160, 320 };
    vx_tensor inception_4e_3x3_w = vxCreateTensor(context, 4, dims_inception_4e_3x3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_3x3_w);
    vx_size dims_inception_4e_3x3_b[2] = { 320, 1 };
    vx_tensor inception_4e_3x3_b = vxCreateTensor(context, 2, dims_inception_4e_3x3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_3x3_b);
    vx_size dims_inception_4e_5x5_reduce_w[4] = { 1, 1, 528, 32 };
    vx_tensor inception_4e_5x5_reduce_w = vxCreateTensor(context, 4, dims_inception_4e_5x5_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_5x5_reduce_w);
    vx_size dims_inception_4e_5x5_reduce_b[2] = { 32, 1 };
    vx_tensor inception_4e_5x5_reduce_b = vxCreateTensor(context, 2, dims_inception_4e_5x5_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_5x5_reduce_b);
    vx_size dims_inception_4e_5x5_w[4] = { 5, 5, 32, 128 };
    vx_tensor inception_4e_5x5_w = vxCreateTensor(context, 4, dims_inception_4e_5x5_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_5x5_w);
    vx_size dims_inception_4e_5x5_b[2] = { 128, 1 };
    vx_tensor inception_4e_5x5_b = vxCreateTensor(context, 2, dims_inception_4e_5x5_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_5x5_b);
    vx_size dims_inception_4e_pool_proj_w[4] = { 1, 1, 528, 128 };
    vx_tensor inception_4e_pool_proj_w = vxCreateTensor(context, 4, dims_inception_4e_pool_proj_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_pool_proj_w);
    vx_size dims_inception_4e_pool_proj_b[2] = { 128, 1 };
    vx_tensor inception_4e_pool_proj_b = vxCreateTensor(context, 2, dims_inception_4e_pool_proj_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_pool_proj_b);
    vx_size dims_inception_5a_1x1_w[4] = { 1, 1, 832, 256 };
    vx_tensor inception_5a_1x1_w = vxCreateTensor(context, 4, dims_inception_5a_1x1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_1x1_w);
    vx_size dims_inception_5a_1x1_b[2] = { 256, 1 };
    vx_tensor inception_5a_1x1_b = vxCreateTensor(context, 2, dims_inception_5a_1x1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_1x1_b);
    vx_size dims_inception_5a_3x3_reduce_w[4] = { 1, 1, 832, 160 };
    vx_tensor inception_5a_3x3_reduce_w = vxCreateTensor(context, 4, dims_inception_5a_3x3_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_3x3_reduce_w);
    vx_size dims_inception_5a_3x3_reduce_b[2] = { 160, 1 };
    vx_tensor inception_5a_3x3_reduce_b = vxCreateTensor(context, 2, dims_inception_5a_3x3_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_3x3_reduce_b);
    vx_size dims_inception_5a_3x3_w[4] = { 3, 3, 160, 320 };
    vx_tensor inception_5a_3x3_w = vxCreateTensor(context, 4, dims_inception_5a_3x3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_3x3_w);
    vx_size dims_inception_5a_3x3_b[2] = { 320, 1 };
    vx_tensor inception_5a_3x3_b = vxCreateTensor(context, 2, dims_inception_5a_3x3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_3x3_b);
    vx_size dims_inception_5a_5x5_reduce_w[4] = { 1, 1, 832, 32 };
    vx_tensor inception_5a_5x5_reduce_w = vxCreateTensor(context, 4, dims_inception_5a_5x5_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_5x5_reduce_w);
    vx_size dims_inception_5a_5x5_reduce_b[2] = { 32, 1 };
    vx_tensor inception_5a_5x5_reduce_b = vxCreateTensor(context, 2, dims_inception_5a_5x5_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_5x5_reduce_b);
    vx_size dims_inception_5a_5x5_w[4] = { 5, 5, 32, 128 };
    vx_tensor inception_5a_5x5_w = vxCreateTensor(context, 4, dims_inception_5a_5x5_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_5x5_w);
    vx_size dims_inception_5a_5x5_b[2] = { 128, 1 };
    vx_tensor inception_5a_5x5_b = vxCreateTensor(context, 2, dims_inception_5a_5x5_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_5x5_b);
    vx_size dims_inception_5a_pool_proj_w[4] = { 1, 1, 832, 128 };
    vx_tensor inception_5a_pool_proj_w = vxCreateTensor(context, 4, dims_inception_5a_pool_proj_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_pool_proj_w);
    vx_size dims_inception_5a_pool_proj_b[2] = { 128, 1 };
    vx_tensor inception_5a_pool_proj_b = vxCreateTensor(context, 2, dims_inception_5a_pool_proj_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_pool_proj_b);
    vx_size dims_inception_5b_1x1_w[4] = { 1, 1, 832, 384 };
    vx_tensor inception_5b_1x1_w = vxCreateTensor(context, 4, dims_inception_5b_1x1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_1x1_w);
    vx_size dims_inception_5b_1x1_b[2] = { 384, 1 };
    vx_tensor inception_5b_1x1_b = vxCreateTensor(context, 2, dims_inception_5b_1x1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_1x1_b);
    vx_size dims_inception_5b_3x3_reduce_w[4] = { 1, 1, 832, 192 };
    vx_tensor inception_5b_3x3_reduce_w = vxCreateTensor(context, 4, dims_inception_5b_3x3_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_3x3_reduce_w);
    vx_size dims_inception_5b_3x3_reduce_b[2] = { 192, 1 };
    vx_tensor inception_5b_3x3_reduce_b = vxCreateTensor(context, 2, dims_inception_5b_3x3_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_3x3_reduce_b);
    vx_size dims_inception_5b_3x3_w[4] = { 3, 3, 192, 384 };
    vx_tensor inception_5b_3x3_w = vxCreateTensor(context, 4, dims_inception_5b_3x3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_3x3_w);
    vx_size dims_inception_5b_3x3_b[2] = { 384, 1 };
    vx_tensor inception_5b_3x3_b = vxCreateTensor(context, 2, dims_inception_5b_3x3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_3x3_b);
    vx_size dims_inception_5b_5x5_reduce_w[4] = { 1, 1, 832, 48 };
    vx_tensor inception_5b_5x5_reduce_w = vxCreateTensor(context, 4, dims_inception_5b_5x5_reduce_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_5x5_reduce_w);
    vx_size dims_inception_5b_5x5_reduce_b[2] = { 48, 1 };
    vx_tensor inception_5b_5x5_reduce_b = vxCreateTensor(context, 2, dims_inception_5b_5x5_reduce_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_5x5_reduce_b);
    vx_size dims_inception_5b_5x5_w[4] = { 5, 5, 48, 128 };
    vx_tensor inception_5b_5x5_w = vxCreateTensor(context, 4, dims_inception_5b_5x5_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_5x5_w);
    vx_size dims_inception_5b_5x5_b[2] = { 128, 1 };
    vx_tensor inception_5b_5x5_b = vxCreateTensor(context, 2, dims_inception_5b_5x5_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_5x5_b);
    vx_size dims_inception_5b_pool_proj_w[4] = { 1, 1, 832, 128 };
    vx_tensor inception_5b_pool_proj_w = vxCreateTensor(context, 4, dims_inception_5b_pool_proj_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_pool_proj_w);
    vx_size dims_inception_5b_pool_proj_b[2] = { 128, 1 };
    vx_tensor inception_5b_pool_proj_b = vxCreateTensor(context, 2, dims_inception_5b_pool_proj_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_pool_proj_b);
    vx_size dims_loss3_classifier_19c_w[4] = { 1, 1, 1024, 19 };
    vx_tensor loss3_classifier_19c_w = vxCreateTensor(context, 4, dims_loss3_classifier_19c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(loss3_classifier_19c_w);
    vx_size dims_loss3_classifier_19c_b[2] = { 19, 1 };
    vx_tensor loss3_classifier_19c_b = vxCreateTensor(context, 2, dims_loss3_classifier_19c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(loss3_classifier_19c_b);
    vx_size dims_upscore2_w[4] = { 4, 4, 19, 19 };
    vx_tensor upscore2_w = vxCreateTensor(context, 4, dims_upscore2_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(upscore2_w);
    vx_size dims_score_pool3_w[4] = { 1, 1, 480, 19 };
    vx_tensor score_pool3_w = vxCreateTensor(context, 4, dims_score_pool3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(score_pool3_w);
    vx_size dims_score_pool3_b[2] = { 19, 1 };
    vx_tensor score_pool3_b = vxCreateTensor(context, 2, dims_score_pool3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(score_pool3_b);
    vx_size dims_upsample_fused_w[4] = { 16, 16, 19, 19 };
    vx_tensor upsample_fused_w = vxCreateTensor(context, 4, dims_upsample_fused_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(upsample_fused_w);

    // initialize variables
    FILE * fp__variables = fopen(binaryFilename, "rb");
    if(!fp__variables) {
        vxAddLogEntry((vx_reference)context, VX_FAILURE, "ERROR: unable to open: %s\n", binaryFilename);
        return VX_FAILURE;
    }
    { vx_uint32 magic = 0;
      fread(&magic, 1, sizeof(magic), fp__variables);
      if(magic != 0xf00dd1e0) {
        vxAddLogEntry((vx_reference)context, VX_FAILURE, "ERROR: invalid file magic in %s\n", binaryFilename);
        return VX_FAILURE;
      }
    }
    ERROR_CHECK_STATUS(initializeTensor(context, conv1_7x7_s2_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv1_7x7_s2_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv2_3x3_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv2_3x3_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv2_3x3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv2_3x3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_1x1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_1x1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_3x3_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_3x3_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_3x3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_3x3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_5x5_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_5x5_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_5x5_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_5x5_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_pool_proj_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3a_pool_proj_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_1x1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_1x1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_3x3_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_3x3_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_3x3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_3x3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_5x5_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_5x5_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_5x5_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_5x5_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_pool_proj_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_3b_pool_proj_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_1x1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_1x1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_3x3_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_3x3_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_3x3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_3x3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_5x5_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_5x5_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_5x5_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_5x5_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_pool_proj_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4a_pool_proj_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_1x1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_1x1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_3x3_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_3x3_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_3x3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_3x3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_5x5_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_5x5_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_5x5_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_5x5_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_pool_proj_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4b_pool_proj_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_1x1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_1x1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_3x3_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_3x3_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_3x3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_3x3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_5x5_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_5x5_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_5x5_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_5x5_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_pool_proj_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4c_pool_proj_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_1x1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_1x1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_3x3_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_3x3_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_3x3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_3x3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_5x5_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_5x5_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_5x5_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_5x5_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_pool_proj_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4d_pool_proj_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_1x1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_1x1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_3x3_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_3x3_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_3x3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_3x3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_5x5_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_5x5_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_5x5_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_5x5_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_pool_proj_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_4e_pool_proj_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_1x1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_1x1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_3x3_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_3x3_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_3x3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_3x3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_5x5_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_5x5_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_5x5_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_5x5_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_pool_proj_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5a_pool_proj_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_1x1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_1x1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_3x3_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_3x3_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_3x3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_3x3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_5x5_reduce_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_5x5_reduce_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_5x5_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_5x5_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_pool_proj_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, inception_5b_pool_proj_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, loss3_classifier_19c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, loss3_classifier_19c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, upscore2_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, score_pool3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, score_pool3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, upsample_fused_w, fp__variables, binaryFilename));
    { vx_uint32 magic = 0;
      fread(&magic, 1, sizeof(magic), fp__variables);
      if(magic != 0xf00dd1e2) {
        vxAddLogEntry((vx_reference)context, VX_FAILURE, "ERROR: invalid eoff magic in %s\n", binaryFilename);
        return VX_FAILURE;
      }
      fclose(fp__variables);
    }

    // create local tensors used in graph
    vx_size dims_conv1_7x7_s2[4] = { 1024, 512, 64, 1 };
    vx_tensor conv1_7x7_s2 = vxCreateVirtualTensor(graph, 4, dims_conv1_7x7_s2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_7x7_s2);
    vx_size dims_conv1_relu_7x7[4] = { 1024, 512, 64, 1 };
    vx_tensor conv1_relu_7x7 = vxCreateVirtualTensor(graph, 4, dims_conv1_relu_7x7, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_relu_7x7);
    vx_size dims_pool1_3x3_s2[4] = { 512, 256, 64, 1 };
    vx_tensor pool1_3x3_s2 = vxCreateVirtualTensor(graph, 4, dims_pool1_3x3_s2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(pool1_3x3_s2);
    vx_size dims_pool1_norm1[4] = { 512, 256, 64, 1 };
    vx_tensor pool1_norm1 = vxCreateVirtualTensor(graph, 4, dims_pool1_norm1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(pool1_norm1);
    vx_size dims_conv2_3x3_reduce[4] = { 512, 256, 64, 1 };
    vx_tensor conv2_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_conv2_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_3x3_reduce);
    vx_size dims_conv2_relu_3x3_reduce[4] = { 512, 256, 64, 1 };
    vx_tensor conv2_relu_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_conv2_relu_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_relu_3x3_reduce);
    vx_size dims_conv2_3x3[4] = { 512, 256, 192, 1 };
    vx_tensor conv2_3x3 = vxCreateVirtualTensor(graph, 4, dims_conv2_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_3x3);
    vx_size dims_conv2_relu_3x3[4] = { 512, 256, 192, 1 };
    vx_tensor conv2_relu_3x3 = vxCreateVirtualTensor(graph, 4, dims_conv2_relu_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_relu_3x3);
    vx_size dims_conv2_norm2[4] = { 512, 256, 192, 1 };
    vx_tensor conv2_norm2 = vxCreateVirtualTensor(graph, 4, dims_conv2_norm2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_norm2);
    vx_size dims_pool2_3x3_s2[4] = { 256, 128, 192, 1 };
    vx_tensor pool2_3x3_s2 = vxCreateVirtualTensor(graph, 4, dims_pool2_3x3_s2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(pool2_3x3_s2);
    vx_size dims_inception_3a_1x1[4] = { 256, 128, 64, 1 };
    vx_tensor inception_3a_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_3a_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_1x1);
    vx_size dims_inception_3a_relu_1x1[4] = { 256, 128, 64, 1 };
    vx_tensor inception_3a_relu_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_3a_relu_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_relu_1x1);
    vx_size dims_inception_3a_3x3_reduce[4] = { 256, 128, 96, 1 };
    vx_tensor inception_3a_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_3a_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_3x3_reduce);
    vx_size dims_inception_3a_relu_3x3_reduce[4] = { 256, 128, 96, 1 };
    vx_tensor inception_3a_relu_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_3a_relu_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_relu_3x3_reduce);
    vx_size dims_inception_3a_3x3[4] = { 256, 128, 128, 1 };
    vx_tensor inception_3a_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_3a_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_3x3);
    vx_size dims_inception_3a_relu_3x3[4] = { 256, 128, 128, 1 };
    vx_tensor inception_3a_relu_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_3a_relu_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_relu_3x3);
    vx_size dims_inception_3a_5x5_reduce[4] = { 256, 128, 16, 1 };
    vx_tensor inception_3a_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_3a_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_5x5_reduce);
    vx_size dims_inception_3a_relu_5x5_reduce[4] = { 256, 128, 16, 1 };
    vx_tensor inception_3a_relu_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_3a_relu_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_relu_5x5_reduce);
    vx_size dims_inception_3a_5x5[4] = { 256, 128, 32, 1 };
    vx_tensor inception_3a_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_3a_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_5x5);
    vx_size dims_inception_3a_relu_5x5[4] = { 256, 128, 32, 1 };
    vx_tensor inception_3a_relu_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_3a_relu_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_relu_5x5);
    vx_size dims_inception_3a_pool[4] = { 256, 128, 192, 1 };
    vx_tensor inception_3a_pool = vxCreateVirtualTensor(graph, 4, dims_inception_3a_pool, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_pool);
    vx_size dims_inception_3a_pool_proj[4] = { 256, 128, 32, 1 };
    vx_tensor inception_3a_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_3a_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_pool_proj);
    vx_size dims_inception_3a_relu_pool_proj[4] = { 256, 128, 32, 1 };
    vx_tensor inception_3a_relu_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_3a_relu_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_relu_pool_proj);
    vx_size dims_inception_3a_output[4] = { 256, 128, 256, 1 };
    vx_tensor inception_3a_output = vxCreateVirtualTensor(graph, 4, dims_inception_3a_output, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3a_output);
    vx_size dims_inception_3b_1x1[4] = { 256, 128, 128, 1 };
    vx_tensor inception_3b_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_3b_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_1x1);
    vx_size dims_inception_3b_relu_1x1[4] = { 256, 128, 128, 1 };
    vx_tensor inception_3b_relu_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_3b_relu_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_relu_1x1);
    vx_size dims_inception_3b_3x3_reduce[4] = { 256, 128, 128, 1 };
    vx_tensor inception_3b_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_3b_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_3x3_reduce);
    vx_size dims_inception_3b_relu_3x3_reduce[4] = { 256, 128, 128, 1 };
    vx_tensor inception_3b_relu_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_3b_relu_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_relu_3x3_reduce);
    vx_size dims_inception_3b_3x3[4] = { 256, 128, 192, 1 };
    vx_tensor inception_3b_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_3b_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_3x3);
    vx_size dims_inception_3b_relu_3x3[4] = { 256, 128, 192, 1 };
    vx_tensor inception_3b_relu_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_3b_relu_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_relu_3x3);
    vx_size dims_inception_3b_5x5_reduce[4] = { 256, 128, 32, 1 };
    vx_tensor inception_3b_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_3b_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_5x5_reduce);
    vx_size dims_inception_3b_relu_5x5_reduce[4] = { 256, 128, 32, 1 };
    vx_tensor inception_3b_relu_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_3b_relu_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_relu_5x5_reduce);
    vx_size dims_inception_3b_5x5[4] = { 256, 128, 96, 1 };
    vx_tensor inception_3b_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_3b_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_5x5);
    vx_size dims_inception_3b_relu_5x5[4] = { 256, 128, 96, 1 };
    vx_tensor inception_3b_relu_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_3b_relu_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_relu_5x5);
    vx_size dims_inception_3b_pool[4] = { 256, 128, 256, 1 };
    vx_tensor inception_3b_pool = vxCreateVirtualTensor(graph, 4, dims_inception_3b_pool, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_pool);
    vx_size dims_inception_3b_pool_proj[4] = { 256, 128, 64, 1 };
    vx_tensor inception_3b_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_3b_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_pool_proj);
    vx_size dims_inception_3b_relu_pool_proj[4] = { 256, 128, 64, 1 };
    vx_tensor inception_3b_relu_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_3b_relu_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_relu_pool_proj);
    vx_size dims_inception_3b_output[4] = { 256, 128, 480, 1 };
    vx_tensor inception_3b_output = vxCreateVirtualTensor(graph, 4, dims_inception_3b_output, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_3b_output);
    vx_size dims_pool3_3x3_s2[4] = { 128, 64, 480, 1 };
    vx_tensor pool3_3x3_s2 = vxCreateVirtualTensor(graph, 4, dims_pool3_3x3_s2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(pool3_3x3_s2);
    vx_size dims_inception_4a_1x1[4] = { 128, 64, 192, 1 };
    vx_tensor inception_4a_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_4a_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_1x1);
    vx_size dims_inception_4a_relu_1x1[4] = { 128, 64, 192, 1 };
    vx_tensor inception_4a_relu_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_4a_relu_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_relu_1x1);
    vx_size dims_inception_4a_3x3_reduce[4] = { 128, 64, 96, 1 };
    vx_tensor inception_4a_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4a_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_3x3_reduce);
    vx_size dims_inception_4a_relu_3x3_reduce[4] = { 128, 64, 96, 1 };
    vx_tensor inception_4a_relu_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4a_relu_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_relu_3x3_reduce);
    vx_size dims_inception_4a_3x3[4] = { 128, 64, 208, 1 };
    vx_tensor inception_4a_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_4a_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_3x3);
    vx_size dims_inception_4a_relu_3x3[4] = { 128, 64, 208, 1 };
    vx_tensor inception_4a_relu_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_4a_relu_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_relu_3x3);
    vx_size dims_inception_4a_5x5_reduce[4] = { 128, 64, 16, 1 };
    vx_tensor inception_4a_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4a_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_5x5_reduce);
    vx_size dims_inception_4a_relu_5x5_reduce[4] = { 128, 64, 16, 1 };
    vx_tensor inception_4a_relu_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4a_relu_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_relu_5x5_reduce);
    vx_size dims_inception_4a_5x5[4] = { 128, 64, 48, 1 };
    vx_tensor inception_4a_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_4a_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_5x5);
    vx_size dims_inception_4a_relu_5x5[4] = { 128, 64, 48, 1 };
    vx_tensor inception_4a_relu_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_4a_relu_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_relu_5x5);
    vx_size dims_inception_4a_pool[4] = { 128, 64, 480, 1 };
    vx_tensor inception_4a_pool = vxCreateVirtualTensor(graph, 4, dims_inception_4a_pool, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_pool);
    vx_size dims_inception_4a_pool_proj[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4a_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_4a_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_pool_proj);
    vx_size dims_inception_4a_relu_pool_proj[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4a_relu_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_4a_relu_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_relu_pool_proj);
    vx_size dims_inception_4a_output[4] = { 128, 64, 512, 1 };
    vx_tensor inception_4a_output = vxCreateVirtualTensor(graph, 4, dims_inception_4a_output, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4a_output);
    vx_size dims_inception_4b_1x1[4] = { 128, 64, 160, 1 };
    vx_tensor inception_4b_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_4b_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_1x1);
    vx_size dims_inception_4b_relu_1x1[4] = { 128, 64, 160, 1 };
    vx_tensor inception_4b_relu_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_4b_relu_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_relu_1x1);
    vx_size dims_inception_4b_3x3_reduce[4] = { 128, 64, 112, 1 };
    vx_tensor inception_4b_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4b_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_3x3_reduce);
    vx_size dims_inception_4b_relu_3x3_reduce[4] = { 128, 64, 112, 1 };
    vx_tensor inception_4b_relu_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4b_relu_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_relu_3x3_reduce);
    vx_size dims_inception_4b_3x3[4] = { 128, 64, 224, 1 };
    vx_tensor inception_4b_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_4b_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_3x3);
    vx_size dims_inception_4b_relu_3x3[4] = { 128, 64, 224, 1 };
    vx_tensor inception_4b_relu_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_4b_relu_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_relu_3x3);
    vx_size dims_inception_4b_5x5_reduce[4] = { 128, 64, 24, 1 };
    vx_tensor inception_4b_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4b_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_5x5_reduce);
    vx_size dims_inception_4b_relu_5x5_reduce[4] = { 128, 64, 24, 1 };
    vx_tensor inception_4b_relu_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4b_relu_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_relu_5x5_reduce);
    vx_size dims_inception_4b_5x5[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4b_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_4b_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_5x5);
    vx_size dims_inception_4b_relu_5x5[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4b_relu_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_4b_relu_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_relu_5x5);
    vx_size dims_inception_4b_pool[4] = { 128, 64, 512, 1 };
    vx_tensor inception_4b_pool = vxCreateVirtualTensor(graph, 4, dims_inception_4b_pool, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_pool);
    vx_size dims_inception_4b_pool_proj[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4b_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_4b_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_pool_proj);
    vx_size dims_inception_4b_relu_pool_proj[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4b_relu_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_4b_relu_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_relu_pool_proj);
    vx_size dims_inception_4b_output[4] = { 128, 64, 512, 1 };
    vx_tensor inception_4b_output = vxCreateVirtualTensor(graph, 4, dims_inception_4b_output, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4b_output);
    vx_size dims_inception_4c_1x1[4] = { 128, 64, 128, 1 };
    vx_tensor inception_4c_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_4c_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_1x1);
    vx_size dims_inception_4c_relu_1x1[4] = { 128, 64, 128, 1 };
    vx_tensor inception_4c_relu_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_4c_relu_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_relu_1x1);
    vx_size dims_inception_4c_3x3_reduce[4] = { 128, 64, 128, 1 };
    vx_tensor inception_4c_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4c_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_3x3_reduce);
    vx_size dims_inception_4c_relu_3x3_reduce[4] = { 128, 64, 128, 1 };
    vx_tensor inception_4c_relu_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4c_relu_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_relu_3x3_reduce);
    vx_size dims_inception_4c_3x3[4] = { 128, 64, 256, 1 };
    vx_tensor inception_4c_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_4c_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_3x3);
    vx_size dims_inception_4c_relu_3x3[4] = { 128, 64, 256, 1 };
    vx_tensor inception_4c_relu_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_4c_relu_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_relu_3x3);
    vx_size dims_inception_4c_5x5_reduce[4] = { 128, 64, 24, 1 };
    vx_tensor inception_4c_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4c_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_5x5_reduce);
    vx_size dims_inception_4c_relu_5x5_reduce[4] = { 128, 64, 24, 1 };
    vx_tensor inception_4c_relu_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4c_relu_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_relu_5x5_reduce);
    vx_size dims_inception_4c_5x5[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4c_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_4c_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_5x5);
    vx_size dims_inception_4c_relu_5x5[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4c_relu_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_4c_relu_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_relu_5x5);
    vx_size dims_inception_4c_pool[4] = { 128, 64, 512, 1 };
    vx_tensor inception_4c_pool = vxCreateVirtualTensor(graph, 4, dims_inception_4c_pool, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_pool);
    vx_size dims_inception_4c_pool_proj[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4c_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_4c_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_pool_proj);
    vx_size dims_inception_4c_relu_pool_proj[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4c_relu_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_4c_relu_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_relu_pool_proj);
    vx_size dims_inception_4c_output[4] = { 128, 64, 512, 1 };
    vx_tensor inception_4c_output = vxCreateVirtualTensor(graph, 4, dims_inception_4c_output, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4c_output);
    vx_size dims_inception_4d_1x1[4] = { 128, 64, 112, 1 };
    vx_tensor inception_4d_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_4d_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_1x1);
    vx_size dims_inception_4d_relu_1x1[4] = { 128, 64, 112, 1 };
    vx_tensor inception_4d_relu_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_4d_relu_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_relu_1x1);
    vx_size dims_inception_4d_3x3_reduce[4] = { 128, 64, 144, 1 };
    vx_tensor inception_4d_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4d_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_3x3_reduce);
    vx_size dims_inception_4d_relu_3x3_reduce[4] = { 128, 64, 144, 1 };
    vx_tensor inception_4d_relu_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4d_relu_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_relu_3x3_reduce);
    vx_size dims_inception_4d_3x3[4] = { 128, 64, 288, 1 };
    vx_tensor inception_4d_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_4d_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_3x3);
    vx_size dims_inception_4d_relu_3x3[4] = { 128, 64, 288, 1 };
    vx_tensor inception_4d_relu_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_4d_relu_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_relu_3x3);
    vx_size dims_inception_4d_5x5_reduce[4] = { 128, 64, 32, 1 };
    vx_tensor inception_4d_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4d_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_5x5_reduce);
    vx_size dims_inception_4d_relu_5x5_reduce[4] = { 128, 64, 32, 1 };
    vx_tensor inception_4d_relu_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4d_relu_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_relu_5x5_reduce);
    vx_size dims_inception_4d_5x5[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4d_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_4d_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_5x5);
    vx_size dims_inception_4d_relu_5x5[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4d_relu_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_4d_relu_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_relu_5x5);
    vx_size dims_inception_4d_pool[4] = { 128, 64, 512, 1 };
    vx_tensor inception_4d_pool = vxCreateVirtualTensor(graph, 4, dims_inception_4d_pool, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_pool);
    vx_size dims_inception_4d_pool_proj[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4d_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_4d_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_pool_proj);
    vx_size dims_inception_4d_relu_pool_proj[4] = { 128, 64, 64, 1 };
    vx_tensor inception_4d_relu_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_4d_relu_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_relu_pool_proj);
    vx_size dims_inception_4d_output[4] = { 128, 64, 528, 1 };
    vx_tensor inception_4d_output = vxCreateVirtualTensor(graph, 4, dims_inception_4d_output, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4d_output);
    vx_size dims_inception_4e_1x1[4] = { 128, 64, 256, 1 };
    vx_tensor inception_4e_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_4e_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_1x1);
    vx_size dims_inception_4e_relu_1x1[4] = { 128, 64, 256, 1 };
    vx_tensor inception_4e_relu_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_4e_relu_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_relu_1x1);
    vx_size dims_inception_4e_3x3_reduce[4] = { 128, 64, 160, 1 };
    vx_tensor inception_4e_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4e_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_3x3_reduce);
    vx_size dims_inception_4e_relu_3x3_reduce[4] = { 128, 64, 160, 1 };
    vx_tensor inception_4e_relu_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4e_relu_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_relu_3x3_reduce);
    vx_size dims_inception_4e_3x3[4] = { 128, 64, 320, 1 };
    vx_tensor inception_4e_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_4e_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_3x3);
    vx_size dims_inception_4e_relu_3x3[4] = { 128, 64, 320, 1 };
    vx_tensor inception_4e_relu_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_4e_relu_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_relu_3x3);
    vx_size dims_inception_4e_5x5_reduce[4] = { 128, 64, 32, 1 };
    vx_tensor inception_4e_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4e_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_5x5_reduce);
    vx_size dims_inception_4e_relu_5x5_reduce[4] = { 128, 64, 32, 1 };
    vx_tensor inception_4e_relu_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_4e_relu_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_relu_5x5_reduce);
    vx_size dims_inception_4e_5x5[4] = { 128, 64, 128, 1 };
    vx_tensor inception_4e_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_4e_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_5x5);
    vx_size dims_inception_4e_relu_5x5[4] = { 128, 64, 128, 1 };
    vx_tensor inception_4e_relu_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_4e_relu_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_relu_5x5);
    vx_size dims_inception_4e_pool[4] = { 128, 64, 528, 1 };
    vx_tensor inception_4e_pool = vxCreateVirtualTensor(graph, 4, dims_inception_4e_pool, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_pool);
    vx_size dims_inception_4e_pool_proj[4] = { 128, 64, 128, 1 };
    vx_tensor inception_4e_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_4e_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_pool_proj);
    vx_size dims_inception_4e_relu_pool_proj[4] = { 128, 64, 128, 1 };
    vx_tensor inception_4e_relu_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_4e_relu_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_relu_pool_proj);
    vx_size dims_inception_4e_output[4] = { 128, 64, 832, 1 };
    vx_tensor inception_4e_output = vxCreateVirtualTensor(graph, 4, dims_inception_4e_output, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_4e_output);
    vx_size dims_inception_5a_1x1[4] = { 128, 64, 256, 1 };
    vx_tensor inception_5a_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_5a_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_1x1);
    vx_size dims_inception_5a_relu_1x1[4] = { 128, 64, 256, 1 };
    vx_tensor inception_5a_relu_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_5a_relu_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_relu_1x1);
    vx_size dims_inception_5a_3x3_reduce[4] = { 128, 64, 160, 1 };
    vx_tensor inception_5a_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_5a_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_3x3_reduce);
    vx_size dims_inception_5a_relu_3x3_reduce[4] = { 128, 64, 160, 1 };
    vx_tensor inception_5a_relu_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_5a_relu_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_relu_3x3_reduce);
    vx_size dims_inception_5a_3x3[4] = { 128, 64, 320, 1 };
    vx_tensor inception_5a_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_5a_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_3x3);
    vx_size dims_inception_5a_relu_3x3[4] = { 128, 64, 320, 1 };
    vx_tensor inception_5a_relu_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_5a_relu_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_relu_3x3);
    vx_size dims_inception_5a_5x5_reduce[4] = { 128, 64, 32, 1 };
    vx_tensor inception_5a_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_5a_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_5x5_reduce);
    vx_size dims_inception_5a_relu_5x5_reduce[4] = { 128, 64, 32, 1 };
    vx_tensor inception_5a_relu_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_5a_relu_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_relu_5x5_reduce);
    vx_size dims_inception_5a_5x5[4] = { 128, 64, 128, 1 };
    vx_tensor inception_5a_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_5a_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_5x5);
    vx_size dims_inception_5a_relu_5x5[4] = { 128, 64, 128, 1 };
    vx_tensor inception_5a_relu_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_5a_relu_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_relu_5x5);
    vx_size dims_inception_5a_pool[4] = { 128, 64, 832, 1 };
    vx_tensor inception_5a_pool = vxCreateVirtualTensor(graph, 4, dims_inception_5a_pool, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_pool);
    vx_size dims_inception_5a_pool_proj[4] = { 128, 64, 128, 1 };
    vx_tensor inception_5a_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_5a_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_pool_proj);
    vx_size dims_inception_5a_relu_pool_proj[4] = { 128, 64, 128, 1 };
    vx_tensor inception_5a_relu_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_5a_relu_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_relu_pool_proj);
    vx_size dims_inception_5a_output[4] = { 128, 64, 832, 1 };
    vx_tensor inception_5a_output = vxCreateVirtualTensor(graph, 4, dims_inception_5a_output, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5a_output);
    vx_size dims_inception_5b_1x1[4] = { 128, 64, 384, 1 };
    vx_tensor inception_5b_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_5b_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_1x1);
    vx_size dims_inception_5b_relu_1x1[4] = { 128, 64, 384, 1 };
    vx_tensor inception_5b_relu_1x1 = vxCreateVirtualTensor(graph, 4, dims_inception_5b_relu_1x1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_relu_1x1);
    vx_size dims_inception_5b_3x3_reduce[4] = { 128, 64, 192, 1 };
    vx_tensor inception_5b_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_5b_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_3x3_reduce);
    vx_size dims_inception_5b_relu_3x3_reduce[4] = { 128, 64, 192, 1 };
    vx_tensor inception_5b_relu_3x3_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_5b_relu_3x3_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_relu_3x3_reduce);
    vx_size dims_inception_5b_3x3[4] = { 128, 64, 384, 1 };
    vx_tensor inception_5b_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_5b_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_3x3);
    vx_size dims_inception_5b_relu_3x3[4] = { 128, 64, 384, 1 };
    vx_tensor inception_5b_relu_3x3 = vxCreateVirtualTensor(graph, 4, dims_inception_5b_relu_3x3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_relu_3x3);
    vx_size dims_inception_5b_5x5_reduce[4] = { 128, 64, 48, 1 };
    vx_tensor inception_5b_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_5b_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_5x5_reduce);
    vx_size dims_inception_5b_relu_5x5_reduce[4] = { 128, 64, 48, 1 };
    vx_tensor inception_5b_relu_5x5_reduce = vxCreateVirtualTensor(graph, 4, dims_inception_5b_relu_5x5_reduce, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_relu_5x5_reduce);
    vx_size dims_inception_5b_5x5[4] = { 128, 64, 128, 1 };
    vx_tensor inception_5b_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_5b_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_5x5);
    vx_size dims_inception_5b_relu_5x5[4] = { 128, 64, 128, 1 };
    vx_tensor inception_5b_relu_5x5 = vxCreateVirtualTensor(graph, 4, dims_inception_5b_relu_5x5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_relu_5x5);
    vx_size dims_inception_5b_pool[4] = { 128, 64, 832, 1 };
    vx_tensor inception_5b_pool = vxCreateVirtualTensor(graph, 4, dims_inception_5b_pool, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_pool);
    vx_size dims_inception_5b_pool_proj[4] = { 128, 64, 128, 1 };
    vx_tensor inception_5b_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_5b_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_pool_proj);
    vx_size dims_inception_5b_relu_pool_proj[4] = { 128, 64, 128, 1 };
    vx_tensor inception_5b_relu_pool_proj = vxCreateVirtualTensor(graph, 4, dims_inception_5b_relu_pool_proj, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_relu_pool_proj);
    vx_size dims_inception_5b_output[4] = { 128, 64, 1024, 1 };
    vx_tensor inception_5b_output = vxCreateVirtualTensor(graph, 4, dims_inception_5b_output, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(inception_5b_output);
    vx_size dims_loss3_classifier_19c[4] = { 128, 64, 19, 1 };
    vx_tensor loss3_classifier_19c = vxCreateVirtualTensor(graph, 4, dims_loss3_classifier_19c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(loss3_classifier_19c);
    vx_size dims_upscore2[4] = { 256, 128, 19, 1 };
    vx_tensor upscore2 = vxCreateVirtualTensor(graph, 4, dims_upscore2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(upscore2);
    vx_size dims_score_pool3[4] = { 256, 128, 19, 1 };
    vx_tensor score_pool3 = vxCreateVirtualTensor(graph, 4, dims_score_pool3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(score_pool3);
    vx_size dims_fuse[4] = { 256, 128, 19, 1 };
    vx_tensor fuse = vxCreateVirtualTensor(graph, 4, dims_fuse, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(fuse);
    vx_size dims_upsample_fused[4] = { 2048, 1024, 19, 1 };
    vx_tensor upsample_fused = vxCreateVirtualTensor(graph, 4, dims_upsample_fused, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(upsample_fused);

    // create nodes in graph

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 3;
      conv_params.padding_y = 3;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, data, conv1_7x7_s2_w, conv1_7x7_s2_b, &conv_params, sizeof(conv_params), conv1_7x7_s2);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv1_7x7_s2, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv1_relu_7x7);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, conv1_relu_7x7, VX_NN_POOLING_MAX, 3, 3, 0, 0, VX_ROUND_POLICY_TO_NEAREST_EVEN, pool1_3x3_s2);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxNormalizationLayer(graph, pool1_3x3_s2, VX_NN_NORMALIZATION_ACROSS_MAPS , 5, 1.000000e-04f, 7.500000e-01f, pool1_norm1);
   ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, pool1_norm1, conv2_3x3_reduce_w, conv2_3x3_reduce_b, &conv_params, sizeof(conv_params), conv2_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv2_3x3_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv2_relu_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, conv2_relu_3x3_reduce, conv2_3x3_w, conv2_3x3_b, &conv_params, sizeof(conv_params), conv2_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv2_3x3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv2_relu_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxNormalizationLayer(graph, conv2_relu_3x3, VX_NN_NORMALIZATION_ACROSS_MAPS , 5, 1.000000e-04f, 7.500000e-01f, conv2_norm2);
   ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, conv2_norm2, VX_NN_POOLING_MAX, 3, 3, 0, 0, VX_ROUND_POLICY_TO_NEAREST_EVEN, pool2_3x3_s2);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, pool2_3x3_s2, inception_3a_1x1_w, inception_3a_1x1_b, &conv_params, sizeof(conv_params), inception_3a_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3a_1x1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3a_relu_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, pool2_3x3_s2, inception_3a_3x3_reduce_w, inception_3a_3x3_reduce_b, &conv_params, sizeof(conv_params), inception_3a_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3a_3x3_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3a_relu_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_3a_relu_3x3_reduce, inception_3a_3x3_w, inception_3a_3x3_b, &conv_params, sizeof(conv_params), inception_3a_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3a_3x3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3a_relu_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, pool2_3x3_s2, inception_3a_5x5_reduce_w, inception_3a_5x5_reduce_b, &conv_params, sizeof(conv_params), inception_3a_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3a_5x5_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3a_relu_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 2;
      conv_params.padding_y = 2;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_3a_relu_5x5_reduce, inception_3a_5x5_w, inception_3a_5x5_b, &conv_params, sizeof(conv_params), inception_3a_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3a_5x5, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3a_relu_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, pool2_3x3_s2, VX_NN_POOLING_MAX, 3, 3, 1, 1, VX_ROUND_POLICY_TO_NEAREST_EVEN, inception_3a_pool);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_3a_pool, inception_3a_pool_proj_w, inception_3a_pool_proj_b, &conv_params, sizeof(conv_params), inception_3a_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3a_pool_proj, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3a_relu_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, inception_3a_output, inception_3a_relu_1x1, inception_3a_relu_3x3, inception_3a_relu_5x5, inception_3a_relu_pool_proj, NULL, NULL, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_3a_output, inception_3b_1x1_w, inception_3b_1x1_b, &conv_params, sizeof(conv_params), inception_3b_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3b_1x1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3b_relu_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_3a_output, inception_3b_3x3_reduce_w, inception_3b_3x3_reduce_b, &conv_params, sizeof(conv_params), inception_3b_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3b_3x3_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3b_relu_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_3b_relu_3x3_reduce, inception_3b_3x3_w, inception_3b_3x3_b, &conv_params, sizeof(conv_params), inception_3b_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3b_3x3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3b_relu_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_3a_output, inception_3b_5x5_reduce_w, inception_3b_5x5_reduce_b, &conv_params, sizeof(conv_params), inception_3b_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3b_5x5_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3b_relu_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 2;
      conv_params.padding_y = 2;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_3b_relu_5x5_reduce, inception_3b_5x5_w, inception_3b_5x5_b, &conv_params, sizeof(conv_params), inception_3b_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3b_5x5, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3b_relu_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, inception_3a_output, VX_NN_POOLING_MAX, 3, 3, 1, 1, VX_ROUND_POLICY_TO_NEAREST_EVEN, inception_3b_pool);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_3b_pool, inception_3b_pool_proj_w, inception_3b_pool_proj_b, &conv_params, sizeof(conv_params), inception_3b_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_3b_pool_proj, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_3b_relu_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, inception_3b_output, inception_3b_relu_1x1, inception_3b_relu_3x3, inception_3b_relu_5x5, inception_3b_relu_pool_proj, NULL, NULL, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, inception_3b_output, VX_NN_POOLING_MAX, 3, 3, 0, 0, VX_ROUND_POLICY_TO_NEAREST_EVEN, pool3_3x3_s2);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, pool3_3x3_s2, inception_4a_1x1_w, inception_4a_1x1_b, &conv_params, sizeof(conv_params), inception_4a_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4a_1x1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4a_relu_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, pool3_3x3_s2, inception_4a_3x3_reduce_w, inception_4a_3x3_reduce_b, &conv_params, sizeof(conv_params), inception_4a_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4a_3x3_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4a_relu_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4a_relu_3x3_reduce, inception_4a_3x3_w, inception_4a_3x3_b, &conv_params, sizeof(conv_params), inception_4a_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4a_3x3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4a_relu_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, pool3_3x3_s2, inception_4a_5x5_reduce_w, inception_4a_5x5_reduce_b, &conv_params, sizeof(conv_params), inception_4a_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4a_5x5_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4a_relu_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 2;
      conv_params.padding_y = 2;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4a_relu_5x5_reduce, inception_4a_5x5_w, inception_4a_5x5_b, &conv_params, sizeof(conv_params), inception_4a_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4a_5x5, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4a_relu_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, pool3_3x3_s2, VX_NN_POOLING_MAX, 3, 3, 1, 1, VX_ROUND_POLICY_TO_NEAREST_EVEN, inception_4a_pool);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4a_pool, inception_4a_pool_proj_w, inception_4a_pool_proj_b, &conv_params, sizeof(conv_params), inception_4a_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4a_pool_proj, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4a_relu_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, inception_4a_output, inception_4a_relu_1x1, inception_4a_relu_3x3, inception_4a_relu_5x5, inception_4a_relu_pool_proj, NULL, NULL, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4a_output, inception_4b_1x1_w, inception_4b_1x1_b, &conv_params, sizeof(conv_params), inception_4b_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4b_1x1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4b_relu_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4a_output, inception_4b_3x3_reduce_w, inception_4b_3x3_reduce_b, &conv_params, sizeof(conv_params), inception_4b_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4b_3x3_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4b_relu_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4b_relu_3x3_reduce, inception_4b_3x3_w, inception_4b_3x3_b, &conv_params, sizeof(conv_params), inception_4b_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4b_3x3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4b_relu_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4a_output, inception_4b_5x5_reduce_w, inception_4b_5x5_reduce_b, &conv_params, sizeof(conv_params), inception_4b_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4b_5x5_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4b_relu_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 2;
      conv_params.padding_y = 2;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4b_relu_5x5_reduce, inception_4b_5x5_w, inception_4b_5x5_b, &conv_params, sizeof(conv_params), inception_4b_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4b_5x5, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4b_relu_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, inception_4a_output, VX_NN_POOLING_MAX, 3, 3, 1, 1, VX_ROUND_POLICY_TO_NEAREST_EVEN, inception_4b_pool);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4b_pool, inception_4b_pool_proj_w, inception_4b_pool_proj_b, &conv_params, sizeof(conv_params), inception_4b_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4b_pool_proj, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4b_relu_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, inception_4b_output, inception_4b_relu_1x1, inception_4b_relu_3x3, inception_4b_relu_5x5, inception_4b_relu_pool_proj, NULL, NULL, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4b_output, inception_4c_1x1_w, inception_4c_1x1_b, &conv_params, sizeof(conv_params), inception_4c_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4c_1x1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4c_relu_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4b_output, inception_4c_3x3_reduce_w, inception_4c_3x3_reduce_b, &conv_params, sizeof(conv_params), inception_4c_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4c_3x3_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4c_relu_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4c_relu_3x3_reduce, inception_4c_3x3_w, inception_4c_3x3_b, &conv_params, sizeof(conv_params), inception_4c_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4c_3x3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4c_relu_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4b_output, inception_4c_5x5_reduce_w, inception_4c_5x5_reduce_b, &conv_params, sizeof(conv_params), inception_4c_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4c_5x5_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4c_relu_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 2;
      conv_params.padding_y = 2;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4c_relu_5x5_reduce, inception_4c_5x5_w, inception_4c_5x5_b, &conv_params, sizeof(conv_params), inception_4c_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4c_5x5, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4c_relu_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, inception_4b_output, VX_NN_POOLING_MAX, 3, 3, 1, 1, VX_ROUND_POLICY_TO_NEAREST_EVEN, inception_4c_pool);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4c_pool, inception_4c_pool_proj_w, inception_4c_pool_proj_b, &conv_params, sizeof(conv_params), inception_4c_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4c_pool_proj, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4c_relu_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, inception_4c_output, inception_4c_relu_1x1, inception_4c_relu_3x3, inception_4c_relu_5x5, inception_4c_relu_pool_proj, NULL, NULL, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4c_output, inception_4d_1x1_w, inception_4d_1x1_b, &conv_params, sizeof(conv_params), inception_4d_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4d_1x1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4d_relu_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4c_output, inception_4d_3x3_reduce_w, inception_4d_3x3_reduce_b, &conv_params, sizeof(conv_params), inception_4d_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4d_3x3_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4d_relu_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4d_relu_3x3_reduce, inception_4d_3x3_w, inception_4d_3x3_b, &conv_params, sizeof(conv_params), inception_4d_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4d_3x3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4d_relu_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4c_output, inception_4d_5x5_reduce_w, inception_4d_5x5_reduce_b, &conv_params, sizeof(conv_params), inception_4d_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4d_5x5_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4d_relu_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 2;
      conv_params.padding_y = 2;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4d_relu_5x5_reduce, inception_4d_5x5_w, inception_4d_5x5_b, &conv_params, sizeof(conv_params), inception_4d_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4d_5x5, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4d_relu_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, inception_4c_output, VX_NN_POOLING_MAX, 3, 3, 1, 1, VX_ROUND_POLICY_TO_NEAREST_EVEN, inception_4d_pool);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4d_pool, inception_4d_pool_proj_w, inception_4d_pool_proj_b, &conv_params, sizeof(conv_params), inception_4d_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4d_pool_proj, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4d_relu_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, inception_4d_output, inception_4d_relu_1x1, inception_4d_relu_3x3, inception_4d_relu_5x5, inception_4d_relu_pool_proj, NULL, NULL, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4d_output, inception_4e_1x1_w, inception_4e_1x1_b, &conv_params, sizeof(conv_params), inception_4e_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4e_1x1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4e_relu_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4d_output, inception_4e_3x3_reduce_w, inception_4e_3x3_reduce_b, &conv_params, sizeof(conv_params), inception_4e_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4e_3x3_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4e_relu_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4e_relu_3x3_reduce, inception_4e_3x3_w, inception_4e_3x3_b, &conv_params, sizeof(conv_params), inception_4e_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4e_3x3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4e_relu_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4d_output, inception_4e_5x5_reduce_w, inception_4e_5x5_reduce_b, &conv_params, sizeof(conv_params), inception_4e_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4e_5x5_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4e_relu_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 2;
      conv_params.padding_y = 2;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4e_relu_5x5_reduce, inception_4e_5x5_w, inception_4e_5x5_b, &conv_params, sizeof(conv_params), inception_4e_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4e_5x5, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4e_relu_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, inception_4d_output, VX_NN_POOLING_MAX, 3, 3, 1, 1, VX_ROUND_POLICY_TO_NEAREST_EVEN, inception_4e_pool);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4e_pool, inception_4e_pool_proj_w, inception_4e_pool_proj_b, &conv_params, sizeof(conv_params), inception_4e_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_4e_pool_proj, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_4e_relu_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, inception_4e_output, inception_4e_relu_1x1, inception_4e_relu_3x3, inception_4e_relu_5x5, inception_4e_relu_pool_proj, NULL, NULL, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4e_output, inception_5a_1x1_w, inception_5a_1x1_b, &conv_params, sizeof(conv_params), inception_5a_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5a_1x1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5a_relu_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4e_output, inception_5a_3x3_reduce_w, inception_5a_3x3_reduce_b, &conv_params, sizeof(conv_params), inception_5a_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5a_3x3_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5a_relu_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_5a_relu_3x3_reduce, inception_5a_3x3_w, inception_5a_3x3_b, &conv_params, sizeof(conv_params), inception_5a_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5a_3x3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5a_relu_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_4e_output, inception_5a_5x5_reduce_w, inception_5a_5x5_reduce_b, &conv_params, sizeof(conv_params), inception_5a_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5a_5x5_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5a_relu_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 2;
      conv_params.padding_y = 2;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_5a_relu_5x5_reduce, inception_5a_5x5_w, inception_5a_5x5_b, &conv_params, sizeof(conv_params), inception_5a_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5a_5x5, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5a_relu_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, inception_4e_output, VX_NN_POOLING_MAX, 3, 3, 1, 1, VX_ROUND_POLICY_TO_NEAREST_EVEN, inception_5a_pool);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_5a_pool, inception_5a_pool_proj_w, inception_5a_pool_proj_b, &conv_params, sizeof(conv_params), inception_5a_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5a_pool_proj, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5a_relu_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, inception_5a_output, inception_5a_relu_1x1, inception_5a_relu_3x3, inception_5a_relu_5x5, inception_5a_relu_pool_proj, NULL, NULL, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_5a_output, inception_5b_1x1_w, inception_5b_1x1_b, &conv_params, sizeof(conv_params), inception_5b_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5b_1x1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5b_relu_1x1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_5a_output, inception_5b_3x3_reduce_w, inception_5b_3x3_reduce_b, &conv_params, sizeof(conv_params), inception_5b_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5b_3x3_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5b_relu_3x3_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_5b_relu_3x3_reduce, inception_5b_3x3_w, inception_5b_3x3_b, &conv_params, sizeof(conv_params), inception_5b_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5b_3x3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5b_relu_3x3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_5a_output, inception_5b_5x5_reduce_w, inception_5b_5x5_reduce_b, &conv_params, sizeof(conv_params), inception_5b_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5b_5x5_reduce, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5b_relu_5x5_reduce);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 2;
      conv_params.padding_y = 2;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_5b_relu_5x5_reduce, inception_5b_5x5_w, inception_5b_5x5_b, &conv_params, sizeof(conv_params), inception_5b_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5b_5x5, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5b_relu_5x5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, inception_5a_output, VX_NN_POOLING_MAX, 3, 3, 1, 1, VX_ROUND_POLICY_TO_NEAREST_EVEN, inception_5b_pool);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_5b_pool, inception_5b_pool_proj_w, inception_5b_pool_proj_b, &conv_params, sizeof(conv_params), inception_5b_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, inception_5b_pool_proj, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, inception_5b_relu_pool_proj);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, inception_5b_output, inception_5b_relu_1x1, inception_5b_relu_3x3, inception_5b_relu_5x5, inception_5b_relu_pool_proj, NULL, NULL, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_5b_output, loss3_classifier_19c_w, loss3_classifier_19c_b, &conv_params, sizeof(conv_params), loss3_classifier_19c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_deconvolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.a_x = 0;
      conv_params.a_y = 0;
      vx_node node = vxDeconvolutionLayer(graph, loss3_classifier_19c, upscore2_w, NULL, &conv_params, sizeof(conv_params), upscore2);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      conv_params.group = 1;
      vx_node node = vxConvolutionLayer(graph, inception_3b_output, score_pool3_w, score_pool3_b, &conv_params, sizeof(conv_params), score_pool3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, upscore2, score_pool3, VX_CONVERT_POLICY_SATURATE, fuse);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_deconvolution_params_t conv_params = { 0 };
      conv_params.padding_x = 4;
      conv_params.padding_y = 4;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.a_x = 0;
      conv_params.a_y = 0;
      vx_node node = vxDeconvolutionLayer(graph, fuse, upsample_fused_w, NULL, &conv_params, sizeof(conv_params), upsample_fused);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxSoftmaxLayer(graph, upsample_fused, loss);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    // release local tensors
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_7x7_s2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_relu_7x7));
    ERROR_CHECK_STATUS(vxReleaseTensor(&pool1_3x3_s2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&pool1_norm1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_relu_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_relu_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_norm2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&pool2_3x3_s2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_relu_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_relu_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_relu_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_relu_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_relu_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_pool));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_relu_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_output));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_relu_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_relu_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_relu_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_relu_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_relu_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_pool));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_relu_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_output));
    ERROR_CHECK_STATUS(vxReleaseTensor(&pool3_3x3_s2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_relu_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_relu_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_relu_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_relu_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_relu_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_pool));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_relu_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_output));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_relu_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_relu_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_relu_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_relu_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_relu_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_pool));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_relu_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_output));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_relu_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_relu_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_relu_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_relu_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_relu_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_pool));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_relu_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_output));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_relu_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_relu_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_relu_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_relu_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_relu_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_pool));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_relu_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_output));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_relu_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_relu_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_relu_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_relu_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_relu_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_pool));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_relu_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_output));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_relu_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_relu_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_relu_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_relu_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_relu_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_pool));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_relu_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_output));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_relu_1x1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_relu_3x3_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_relu_3x3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_relu_5x5_reduce));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_relu_5x5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_pool));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_relu_pool_proj));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_output));
    ERROR_CHECK_STATUS(vxReleaseTensor(&loss3_classifier_19c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&upscore2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&score_pool3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&fuse));
    ERROR_CHECK_STATUS(vxReleaseTensor(&upsample_fused));

    // release initializer tensors
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_7x7_s2_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_7x7_s2_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_3x3_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_3x3_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_3x3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_3x3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_1x1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_1x1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_3x3_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_3x3_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_3x3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_3x3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_5x5_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_5x5_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_5x5_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_5x5_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_pool_proj_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3a_pool_proj_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_1x1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_1x1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_3x3_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_3x3_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_3x3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_3x3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_5x5_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_5x5_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_5x5_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_5x5_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_pool_proj_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_3b_pool_proj_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_1x1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_1x1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_3x3_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_3x3_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_3x3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_3x3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_5x5_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_5x5_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_5x5_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_5x5_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_pool_proj_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4a_pool_proj_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_1x1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_1x1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_3x3_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_3x3_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_3x3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_3x3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_5x5_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_5x5_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_5x5_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_5x5_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_pool_proj_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4b_pool_proj_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_1x1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_1x1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_3x3_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_3x3_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_3x3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_3x3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_5x5_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_5x5_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_5x5_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_5x5_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_pool_proj_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4c_pool_proj_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_1x1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_1x1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_3x3_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_3x3_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_3x3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_3x3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_5x5_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_5x5_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_5x5_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_5x5_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_pool_proj_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4d_pool_proj_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_1x1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_1x1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_3x3_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_3x3_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_3x3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_3x3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_5x5_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_5x5_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_5x5_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_5x5_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_pool_proj_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_4e_pool_proj_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_1x1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_1x1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_3x3_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_3x3_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_3x3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_3x3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_5x5_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_5x5_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_5x5_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_5x5_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_pool_proj_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5a_pool_proj_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_1x1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_1x1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_3x3_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_3x3_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_3x3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_3x3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_5x5_reduce_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_5x5_reduce_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_5x5_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_5x5_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_pool_proj_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&inception_5b_pool_proj_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&loss3_classifier_19c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&loss3_classifier_19c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&upscore2_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&score_pool3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&score_pool3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&upsample_fused_w));

    return VX_SUCCESS;
}
